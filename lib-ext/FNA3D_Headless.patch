commit cfc4fff63b9a450ea305af8df3625cde3b247fd6
Author: psyGamer <psygamer21@gmail.com>
Date:   Sun Nov 24 11:00:39 2024 +0100

    Add Headless driver backend

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 34d9045..f4c6aee 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -49,6 +49,7 @@ endif()
 
 # Defines
 add_definitions(
+	-DFNA3D_DRIVER_HEADLESS
 	-DFNA3D_DRIVER_VULKAN
 	-DFNA3D_DRIVER_OPENGL
 )
@@ -118,6 +119,7 @@ add_library(FNA3D
 	src/FNA3D_PipelineCache.h
 	# Source Files
 	src/FNA3D.c
+    src/FNA3D_Driver_Headless.c
 	src/FNA3D_Driver_D3D11.c
 	src/FNA3D_Driver_OpenGL.c
 	src/FNA3D_Driver_SDL.c
@@ -141,6 +143,7 @@ add_library(mojoshader STATIC
 	MojoShader/profiles/mojoshader_profile_hlsl.c
 	MojoShader/profiles/mojoshader_profile_spirv.c
 	MojoShader/profiles/mojoshader_profile_metal.c
+        MojoShader/mojoshader_headless.c
 )
 if(TRACING_SUPPORT)
 	add_executable(fna3d_replay replay/replay.c)
diff --git a/src/FNA3D.c b/src/FNA3D.c
index 17e890a..24768e6 100644
--- a/src/FNA3D.c
+++ b/src/FNA3D.c
@@ -40,6 +40,9 @@
 /* Drivers */
 
 static const FNA3D_Driver *drivers[] = {
+#if FNA3D_DRIVER_HEADLESS
+    &HeadlessDriver,
+#endif
 #if FNA3D_DRIVER_SDL
 	&SDLGPUDriver,
 #endif
@@ -160,6 +163,11 @@ uint32_t FNA3D_PrepareWindowAttributes(void)
 				continue;
 			}
 		}
+		else if (SDL_strcasecmp("Headless", drivers[i]->Name) != 0)
+		{
+			// Only allow headless mode explicitly
+			continue;
+		}
 		if (drivers[i]->PrepareWindowAttributes(&result))
 		{
 			break;
diff --git a/src/FNA3D_Driver.h b/src/FNA3D_Driver.h
index 4f07960..b6e7f27 100644
--- a/src/FNA3D_Driver.h
+++ b/src/FNA3D_Driver.h
@@ -825,6 +825,7 @@ typedef struct FNA3D_Driver
 	);
 } FNA3D_Driver;
 
+FNA3D_SHAREDINTERNAL FNA3D_Driver HeadlessDriver;
 FNA3D_SHAREDINTERNAL FNA3D_Driver LegacyVulkanDriver;
 FNA3D_SHAREDINTERNAL FNA3D_Driver D3D11Driver;
 FNA3D_SHAREDINTERNAL FNA3D_Driver OpenGLDriver;
diff --git a/src/FNA3D_Driver_Headless.c b/src/FNA3D_Driver_Headless.c
new file mode 100644
index 0000000..8d48637
--- /dev/null
+++ b/src/FNA3D_Driver_Headless.c
@@ -0,0 +1,714 @@
+/* FNA3D - 3D Graphics Library for FNA
+*
+ * Copyright (c) 2020-2024 Ethan Lee
+ *
+ * This software is provided 'as-is', without any express or implied warranty.
+ * In no event will the authors be held liable for any damages arising from
+ * the use of this software.
+ *
+ * Permission is granted to anyone to use this software for any purpose,
+ * including commercial applications, and to alter it and redistribute it
+ * freely, subject to the following restrictions:
+ *
+ * 1. The origin of this software must not be misrepresented; you must not
+ * claim that you wrote the original software. If you use this software in a
+ * product, an acknowledgment in the product documentation would be
+ * appreciated but is not required.
+ *
+ * 2. Altered source versions must be plainly marked as such, and must not be
+ * misrepresented as being the original software.
+ *
+ * 3. This notice may not be removed or altered from any source distribution.
+ *
+ * Ethan "flibitijibibo" Lee <flibitijibibo@flibitijibibo.com>
+ *
+ */
+
+#if FNA3D_DRIVER_HEADLESS
+
+#include "FNA3D_Driver.h"
+
+#ifdef USE_SDL3
+#include <SDL3/SDL.h>
+#else
+#include <SDL.h>
+#define SDL_Mutex SDL_mutex
+#endif
+
+typedef struct Headless_Renderer
+{
+	MOJOSHADER_headlessContext *mojoshaderContext;
+
+	uint32_t stencilReference;
+	uint32_t multisampleMask;
+	float blendConstants[4];
+} Headless_Renderer;
+
+/* Stubs */
+
+static void Headless_VerifyVertexSampler(
+	FNA3D_Renderer *driverData,
+	int32_t index,
+	FNA3D_Texture *texture,
+	FNA3D_SamplerState *sampler
+) {}
+
+static void Headless_VerifySampler(
+	FNA3D_Renderer *driverData,
+	int32_t index,
+	FNA3D_Texture *texture,
+	FNA3D_SamplerState *sampler
+) {}
+
+static void Headless_SwapBuffers(
+	FNA3D_Renderer *driverData,
+	FNA3D_Rect *sourceRectangle,
+	FNA3D_Rect *destinationRectangle,
+	void* overrideWindowHandle
+) {}
+
+static uint8_t Headless_SupportsSRGBRenderTargets(FNA3D_Renderer *driverData)
+{
+	return SDL_TRUE;
+}
+
+static uint8_t Headless_SupportsS3TC(FNA3D_Renderer *driverData)
+{
+	return SDL_TRUE;
+}
+
+static uint8_t Headless_SupportsNoOverwrite(FNA3D_Renderer *driverData)
+{
+	return SDL_TRUE;
+}
+
+static uint8_t Headless_SupportsHardwareInstancing(FNA3D_Renderer *driverData)
+{
+	return SDL_TRUE;
+}
+
+static uint8_t Headless_SupportsDXT1(FNA3D_Renderer *driverData)
+{
+	return SDL_TRUE;
+}
+
+static uint8_t Headless_SupportsBC7(FNA3D_Renderer *driverData)
+{
+	return SDL_TRUE;
+}
+
+static void Headless_SetViewport(
+	FNA3D_Renderer *driverData,
+	FNA3D_Viewport *viewport
+) {}
+
+static void Headless_SetVertexBufferData(
+	FNA3D_Renderer *driverData,
+	FNA3D_Buffer *buffer,
+	int32_t offsetInBytes,
+	void* data,
+	int32_t elementCount,
+	int32_t elementSizeInBytes,
+	int32_t vertexStride,
+	FNA3D_SetDataOptions options
+) {}
+
+static void Headless_SetTextureName(
+	FNA3D_Renderer *driverData,
+	FNA3D_Texture *texture,
+	const char *text
+) {}
+
+static void Headless_SetTextureDataYUV(
+	FNA3D_Renderer *driverData,
+	FNA3D_Texture *y,
+	FNA3D_Texture *u,
+	FNA3D_Texture *v,
+	int32_t yWidth,
+	int32_t yHeight,
+	int32_t uvWidth,
+	int32_t uvHeight,
+	void* data,
+	int32_t dataLength
+) {}
+
+static void Headless_SetTextureDataCube(
+	FNA3D_Renderer *driverData,
+	FNA3D_Texture *texture,
+	int32_t x,
+	int32_t y,
+	int32_t w,
+	int32_t h,
+	FNA3D_CubeMapFace cubeMapFace,
+	int32_t level,
+	void* data,
+	int32_t dataLength
+) {}
+
+static void Headless_SetTextureData3D(
+	FNA3D_Renderer *driverData,
+	FNA3D_Texture *texture,
+	int32_t x,
+	int32_t y,
+	int32_t z,
+	int32_t w,
+	int32_t h,
+	int32_t d,
+	int32_t level,
+	void* data,
+	int32_t dataLength
+) {}
+
+static void Headless_SetTextureData2D(
+	FNA3D_Renderer *driverData,
+	FNA3D_Texture *texture,
+	int32_t x,
+	int32_t y,
+	int32_t w,
+	int32_t h,
+	int32_t level,
+	void* data,
+	int32_t dataLength
+) {}
+
+static void Headless_SetStringMarker(
+	FNA3D_Renderer *driverData,
+	const char *text
+) {}
+
+static void Headless_SetScissorRect(
+	FNA3D_Renderer *driverData,
+	FNA3D_Rect *scissor
+) {}
+
+static void Headless_SetRenderTargets(
+	FNA3D_Renderer *driverData,
+	FNA3D_RenderTargetBinding *renderTargets,
+	int32_t numRenderTargets,
+	FNA3D_Renderbuffer *depthStencilBuffer,
+	FNA3D_DepthFormat depthFormat,
+	uint8_t preserveTargetContents
+) {}
+
+static void Headless_SetReferenceStencil(
+	FNA3D_Renderer *driverData,
+	int32_t ref
+) {
+	Headless_Renderer *renderer = (Headless_Renderer*)driverData;
+	renderer->stencilReference = ref;
+}
+
+static void Headless_SetMultiSampleMask(
+	FNA3D_Renderer *driverData,
+	int32_t mask
+) {
+	Headless_Renderer *renderer = (Headless_Renderer*) driverData;
+	renderer->multisampleMask = mask;
+}
+
+static void Headless_SetIndexBufferData(
+	FNA3D_Renderer *driverData,
+	FNA3D_Buffer *buffer,
+	int32_t offsetInBytes,
+	void* data,
+	int32_t dataLength,
+	FNA3D_SetDataOptions options
+) {}
+
+static void Headless_SetEffectTechnique(
+	FNA3D_Renderer *driverData,
+	FNA3D_Effect *effect,
+	MOJOSHADER_effectTechnique *technique
+) {}
+
+static void Headless_SetDepthStencilState(
+	FNA3D_Renderer *driverData,
+	FNA3D_DepthStencilState *depthStencilState
+) {}
+
+static void Headless_SetBlendState(
+	FNA3D_Renderer *driverData,
+	FNA3D_BlendState *blendState
+) {}
+
+static void Headless_SetBlendFactor(
+	FNA3D_Renderer *driverData,
+	FNA3D_Color *blendFactor
+) {
+	Headless_Renderer *renderer = (Headless_Renderer*) driverData;
+
+	if (
+		blendFactor->r != renderer->blendConstants[0] ||
+		blendFactor->g != renderer->blendConstants[1] ||
+		blendFactor->b != renderer->blendConstants[2] ||
+		blendFactor->a != renderer->blendConstants[3]
+	) {
+		renderer->blendConstants[0] = (float) blendFactor->r / 255.0f;
+		renderer->blendConstants[1] = (float) blendFactor->g / 255.0f;
+		renderer->blendConstants[2] = (float) blendFactor->b / 255.0f;
+		renderer->blendConstants[3] = (float) blendFactor->a / 255.0f;
+	}
+}
+
+static void Headless_ResolveTarget(
+	FNA3D_Renderer *driverData,
+	FNA3D_RenderTargetBinding *target
+) {}
+
+static void Headless_ResetBackbuffer(
+	FNA3D_Renderer *driverData,
+	FNA3D_PresentationParameters *presentationParameters
+) {}
+
+static void Headless_ReadBackbuffer(
+	FNA3D_Renderer *driverData,
+	int32_t x,
+	int32_t y,
+	int32_t w,
+	int32_t h,
+	void* data,
+	int32_t dataLength
+) {}
+
+static int32_t Headless_QueryPixelCount(
+	FNA3D_Renderer *driverData,
+	FNA3D_Query *query
+) {
+	return 0;
+}
+
+static void Headless_QueryEnd(
+	FNA3D_Renderer *driverData,
+	FNA3D_Query *query
+) {}
+
+static uint8_t Headless_QueryComplete(
+	FNA3D_Renderer *driverData,
+	FNA3D_Query *query
+) {
+	return 0;
+}
+
+static void Headless_QueryBegin(
+	FNA3D_Renderer *driverData,
+	FNA3D_Query *query
+) {}
+
+static void Headless_GetVertexBufferData(
+	FNA3D_Renderer *driverData,
+	FNA3D_Buffer *buffer,
+	int32_t offsetInBytes,
+	void* data,
+	int32_t elementCount,
+	int32_t elementSizeInBytes,
+	int32_t vertexStride
+) {}
+
+static void Headless_GetTextureDataCube(
+	FNA3D_Renderer *driverData,
+	FNA3D_Texture *texture,
+	int32_t x,
+	int32_t y,
+	int32_t w,
+	int32_t h,
+	FNA3D_CubeMapFace cubeMapFace,
+	int32_t level,
+	void* data,
+	int32_t dataLength
+) {}
+
+static void Headless_GetTextureData3D(
+	FNA3D_Renderer *driverData,
+	FNA3D_Texture *texture,
+	int32_t x,
+	int32_t y,
+	int32_t z,
+	int32_t w,
+	int32_t h,
+	int32_t d,
+	int32_t level,
+	void* data,
+	int32_t dataLength
+) {}
+
+static void Headless_GetTextureData2D(
+	FNA3D_Renderer *driverData,
+	FNA3D_Texture *texture,
+	int32_t x,
+	int32_t y,
+	int32_t w,
+	int32_t h,
+	int32_t level,
+	void* data,
+	int32_t dataLength
+) {}
+
+static void Headless_GetSysRenderer(
+	FNA3D_Renderer *driverData,
+	FNA3D_SysRendererEXT *sysrenderer
+) {}
+
+static int32_t Headless_GetReferenceStencil(
+	FNA3D_Renderer *driverData
+) {
+	Headless_Renderer *renderer = (Headless_Renderer*)driverData;
+	return (int32_t) renderer->stencilReference;
+}
+
+static int32_t Headless_GetMultiSampleMask(
+	FNA3D_Renderer *driverData
+) {
+	Headless_Renderer *renderer = (Headless_Renderer*) driverData;
+	return (int32_t) renderer->multisampleMask;
+}
+
+static void Headless_GetMaxTextureSlots(
+	FNA3D_Renderer *driverData,
+	int32_t *textures,
+	int32_t *vertexTextures
+) {
+	*textures = MAX_TEXTURE_SAMPLERS;
+	*vertexTextures = MAX_VERTEXTEXTURE_SAMPLERS;
+}
+
+static int32_t Headless_GetMaxMultiSampleCount(
+	FNA3D_Renderer *driverData,
+	FNA3D_SurfaceFormat format,
+	int32_t multiSampleCount
+) {
+	// "Support" up to 8 multi-samples (based on SDL's max)
+	return SDL_min(multiSampleCount, 8);
+}
+
+static void Headless_GetIndexBufferData(
+	FNA3D_Renderer *driverData,
+	FNA3D_Buffer *buffer,
+	int32_t offsetInBytes,
+	void* data,
+	int32_t dataLength
+) {}
+
+static void Headless_GetBlendFactor(
+	FNA3D_Renderer *driverData,
+	FNA3D_Color *blendFactor
+) {
+	Headless_Renderer *renderer = (Headless_Renderer*) driverData;
+
+	blendFactor->r = (uint8_t) SDL_roundf(renderer->blendConstants[0] * 255.0f);
+	blendFactor->g = (uint8_t) SDL_roundf(renderer->blendConstants[1] * 255.0f);
+	blendFactor->b = (uint8_t) SDL_roundf(renderer->blendConstants[2] * 255.0f);
+	blendFactor->a = (uint8_t) SDL_roundf(renderer->blendConstants[3] * 255.0f);
+}
+
+static FNA3D_SurfaceFormat Headless_GetBackbufferSurfaceFormat(
+	FNA3D_Renderer *driverData
+) {
+	return FNA3D_SURFACEFORMAT_COLOR;
+}
+
+static void Headless_GetBackbufferSize(
+	FNA3D_Renderer *driverData,
+	int32_t *w,
+	int32_t *h
+) {
+	*w = 0;
+	*h = 0;
+}
+
+static int32_t Headless_GetBackbufferMultiSampleCount(
+	FNA3D_Renderer *driverData
+) {
+	return 8;
+}
+
+static FNA3D_DepthFormat Headless_GetBackbufferDepthFormat(
+	FNA3D_Renderer *driverData
+) {
+	return FNA3D_DEPTHFORMAT_D24S8;
+}
+
+static FNA3D_Buffer* Headless_GenVertexBuffer(
+	FNA3D_Renderer *driverData,
+	uint8_t dynamic,
+	FNA3D_BufferUsage usage,
+	int32_t sizeInBytes
+) {
+	return (FNA3D_Buffer*) 1;
+}
+
+static FNA3D_Buffer* Headless_GenIndexBuffer(
+	FNA3D_Renderer *driverData,
+	uint8_t dynamic,
+	FNA3D_BufferUsage usage,
+	int32_t sizeInBytes
+) {
+	return (FNA3D_Buffer*) 1;
+}
+
+static FNA3D_Renderbuffer* Headless_GenDepthStencilRenderbuffer(
+	FNA3D_Renderer *driverData,
+	int32_t width,
+	int32_t height,
+	FNA3D_DepthFormat format,
+	int32_t multiSampleCount
+) {
+	return (FNA3D_Renderbuffer*) 1;
+}
+
+static FNA3D_Renderbuffer* Headless_GenColorRenderbuffer(
+	FNA3D_Renderer *driverData,
+	int32_t width,
+	int32_t height,
+	FNA3D_SurfaceFormat format,
+	int32_t multiSampleCount,
+	FNA3D_Texture *texture
+) {
+	return (FNA3D_Renderbuffer*) 1;
+}
+
+static void Headless_EndPassRestore(
+	FNA3D_Renderer *driverData,
+	FNA3D_Effect *effect
+) {}
+
+static void Headless_DrawPrimitives(
+	FNA3D_Renderer *driverData,
+	FNA3D_PrimitiveType primitiveType,
+	int32_t vertexStart,
+	int32_t primitiveCount
+) {}
+
+static void Headless_DrawInstancedPrimitives(
+	FNA3D_Renderer *driverData,
+	FNA3D_PrimitiveType primitiveType,
+	int32_t baseVertex,
+	int32_t minVertexIndex,
+	int32_t numVertices,
+	int32_t startIndex,
+	int32_t primitiveCount,
+	int32_t instanceCount,
+	FNA3D_Buffer *indices,
+	FNA3D_IndexElementSize indexElementSize
+) {}
+
+static void Headless_DrawIndexedPrimitives(
+	FNA3D_Renderer *driverData,
+	FNA3D_PrimitiveType primitiveType,
+	int32_t baseVertex,
+	int32_t minVertexIndex,
+	int32_t numVertices,
+	int32_t startIndex,
+	int32_t primitiveCount,
+	FNA3D_Buffer *indices,
+	FNA3D_IndexElementSize indexElementSize
+) {}
+
+static FNA3D_Texture* Headless_CreateTextureCube(
+	FNA3D_Renderer *driverData,
+	FNA3D_SurfaceFormat format,
+	int32_t size,
+	int32_t levelCount,
+	uint8_t isRenderTarget
+) {
+	return (FNA3D_Texture*) 1;
+}
+
+static FNA3D_Texture* Headless_CreateTexture3D(
+	FNA3D_Renderer *driverData,
+	FNA3D_SurfaceFormat format,
+	int32_t width,
+	int32_t height,
+	int32_t depth,
+	int32_t levelCount
+	) {
+	return (FNA3D_Texture*) 1;
+}
+
+static FNA3D_Texture* Headless_CreateTexture2D(
+	FNA3D_Renderer *driverData,
+	FNA3D_SurfaceFormat format,
+	int32_t width,
+	int32_t height,
+	int32_t levelCount,
+	uint8_t isRenderTarget
+	) {
+	return (FNA3D_Texture*) 1;
+}
+
+static FNA3D_Texture* Headless_CreateSysTexture(
+	FNA3D_Renderer *driverData,
+	FNA3D_SysTextureEXT *systexture
+	) {
+	return (FNA3D_Texture*) 1;
+}
+
+static FNA3D_Query* Headless_CreateQuery(
+	FNA3D_Renderer *driverData
+) {
+	return NULL;
+}
+
+/* MojoShader backend */
+
+static void Headless_CreateEffect(
+	FNA3D_Renderer *driverData,
+	uint8_t *effectCode,
+	uint32_t effectCodeLength,
+	FNA3D_Effect **effect,
+	MOJOSHADER_effect **effectData
+) {
+	Headless_Renderer *renderer = (Headless_Renderer*) driverData;
+	MOJOSHADER_effectShaderContext shaderBackend = {0};
+
+	shaderBackend.shaderContext = renderer->mojoshaderContext;
+	shaderBackend.compileShader = (MOJOSHADER_compileShaderFunc) MOJOSHADER_headlessCompileShader;
+	shaderBackend.getParseData = (MOJOSHADER_getParseDataFunc) MOJOSHADER_headlessGetShaderParseData;
+	// Other callbacks aren't required to parse shaders
+	shaderBackend.m = NULL;
+	shaderBackend.f = NULL;
+	shaderBackend.malloc_data = NULL;
+
+	*effectData = MOJOSHADER_compileEffect(
+		effectCode,
+		effectCodeLength,
+		NULL,
+		0,
+		NULL,
+		0,
+		&shaderBackend
+	);
+	*effect = (FNA3D_Effect*) effectData;
+}
+
+static void Headless_CloneEffect(
+	FNA3D_Renderer *driverData,
+	FNA3D_Effect *cloneSource,
+	FNA3D_Effect **effect,
+	MOJOSHADER_effect **effectData
+) {
+	MOJOSHADER_effect *cloneSourceEffect = (MOJOSHADER_effect*) cloneSource;
+
+	*effectData = MOJOSHADER_cloneEffect(cloneSourceEffect);
+	*effect = (FNA3D_Effect*) effectData;
+}
+
+static void Headless_Clear(
+	FNA3D_Renderer *driverData,
+	FNA3D_ClearOptions options,
+	FNA3D_Vec4 *color,
+	float depth,
+	int32_t stencil
+) {}
+
+static void Headless_BeginPassRestore(
+	FNA3D_Renderer *driverData,
+	FNA3D_Effect *effect,
+	MOJOSHADER_effectStateChanges *stateChanges
+) {}
+
+static void Headless_ApplyVertexBufferBindings(
+	FNA3D_Renderer *driverData,
+	FNA3D_VertexBufferBinding *bindings,
+	int32_t numBindings,
+	uint8_t bindingsUpdated,
+	int32_t baseVertex
+) {}
+
+static void Headless_ApplyRasterizerState(
+	FNA3D_Renderer *driverData,
+	FNA3D_RasterizerState *rasterizerState
+) {}
+
+static void Headless_ApplyEffect(
+	FNA3D_Renderer *driverData,
+	FNA3D_Effect *effect,
+	uint32_t pass,
+	MOJOSHADER_effectStateChanges *stateChanges
+) {}
+
+static void Headless_AddDisposeVertexBuffer(
+	FNA3D_Renderer *driverData,
+	FNA3D_Buffer *buffer
+) {}
+
+static void Headless_AddDisposeTexture(
+	FNA3D_Renderer *driverData,
+	FNA3D_Texture *texture
+) {}
+
+static void Headless_AddDisposeRenderbuffer(
+	FNA3D_Renderer *driverData,
+	FNA3D_Renderbuffer *renderbuffer
+) {}
+
+static void Headless_AddDisposeQuery(
+	FNA3D_Renderer *driverData,
+	FNA3D_Query *query
+) {}
+
+static void Headless_AddDisposeIndexBuffer(
+	FNA3D_Renderer *driverData,
+	FNA3D_Buffer *buffer
+) {}
+
+static void Headless_AddDisposeEffect(
+	FNA3D_Renderer *driverData,
+	FNA3D_Effect *effect
+) {
+	MOJOSHADER_effect *effectData = (MOJOSHADER_effect*) effect;
+	MOJOSHADER_deleteEffect(effectData);
+}
+
+/* Initialization */
+
+static uint8_t Headless_PrepareWindowAttributes(uint32_t *flags)
+{
+	return SDL_TRUE;
+}
+
+static void Headless_DestroyDevice(FNA3D_Device *device)
+{
+	Headless_Renderer *renderer = (Headless_Renderer*) device->driverData;
+
+	MOJOSHADER_headlessDestroyContext(renderer->mojoshaderContext);
+	SDL_free(renderer);
+	SDL_free(device);
+}
+
+static FNA3D_Device* Headless_CreateDevice(
+	FNA3D_PresentationParameters *presentationParameters,
+	uint8_t debugMode
+) {
+	FNA3D_Device *result = SDL_malloc(sizeof(FNA3D_Device));
+	ASSIGN_DRIVER(Headless)
+
+	Headless_Renderer *renderer = SDL_malloc(sizeof(Headless_Renderer));
+	SDL_memset(renderer, '\0', sizeof(Headless_Renderer));
+
+	result->driverData = (FNA3D_Renderer*) renderer;
+
+	renderer->mojoshaderContext = MOJOSHADER_headlessCreateContext(NULL, NULL, NULL);
+	if (renderer->mojoshaderContext == NULL)
+	{
+		FNA3D_LogError("Could not create MojoShader context");
+		SDL_free(renderer);
+		SDL_free(result);
+		return NULL;
+	}
+
+	return result;
+}
+
+FNA3D_Driver HeadlessDriver = {
+    "Headless",
+    Headless_PrepareWindowAttributes,
+    Headless_CreateDevice
+};
+
+#else
+
+extern int this_tu_is_empty;
+
+#endif /* FNA3D_DRIVER_HEADLESS */
+
+/* vim: set noexpandtab shiftwidth=8 tabstop=8: */
diff --git a/src/FNA3D_Driver_headless.h b/src/FNA3D_Driver_headless.h
new file mode 100644
index 0000000..444964c
--- /dev/null
+++ b/src/FNA3D_Driver_headless.h
@@ -0,0 +1,30 @@
+/* FNA3D - 3D Graphics Library for FNA
+*
+ * Copyright (c) 2020-2024 Ethan Lee
+ *
+ * This software is provided 'as-is', without any express or implied warranty.
+ * In no event will the authors be held liable for any damages arising from
+ * the use of this software.
+ *
+ * Permission is granted to anyone to use this software for any purpose,
+ * including commercial applications, and to alter it and redistribute it
+ * freely, subject to the following restrictions:
+ *
+ * 1. The origin of this software must not be misrepresented; you must not
+ * claim that you wrote the original software. If you use this software in a
+ * product, an acknowledgment in the product documentation would be
+ * appreciated but is not required.
+ *
+ * 2. Altered source versions must be plainly marked as such, and must not be
+ * misrepresented as being the original software.
+ *
+ * 3. This notice may not be removed or altered from any source distribution.
+ *
+ * Ethan "flibitijibibo" Lee <flibitijibibo@flibitijibibo.com>
+ *
+ */
+
+#ifndef FNA3D_DRIVER_HEADLESS_H
+#define FNA3D_DRIVER_HEADLESS_H
+
+#endif //FNA3D_DRIVER_HEADLESS_H
